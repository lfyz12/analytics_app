const { Report, Employee, TaskTimeLog } = require('../models/models');
const ApiError = require('../error/ApiError');
const { Op } = require('sequelize');

class ReportController {
    // üîπ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞ –¥–µ–Ω—å
    async createReport(req, res, next) {
        try {
            const { employee_id, report_date } = req.body;

            if (!employee_id || !report_date) {
                return next(ApiError.badRequest("–ù–µ —É–∫–∞–∑–∞–Ω employee_id –∏–ª–∏ report_date"));
            }

            const employee = await Employee.findByPk(employee_id);
            if (!employee) {
                return next(ApiError.badRequest("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            const existingReport = await Report.findOne({
                where: { employee_id, report_date }
            });

            if (existingReport) {
                return next(ApiError.badRequest("–û—Ç—á–µ—Ç –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"));
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–µ —Å–µ—Å—Å–∏–∏ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
            const taskTimeLogs = await TaskTimeLog.findAll({
                where: {
                    employee_id,
                    start_time: { [Op.gte]: new Date(report_date) },
                    end_time: { [Op.lte]: new Date(report_date + 'T23:59:59Z') }
                }
            });

            const total_work_time = taskTimeLogs.reduce((acc, log) => {
                if (log.end_time) {
                    return acc + (new Date(log.end_time) - new Date(log.start_time)) / 60000; // –í –º–∏–Ω—É—Ç–∞—Ö
                }
                return acc;
            }, 0);

            const total_tasks_completed = await TaskTimeLog.count({
                where: {
                    employee_id,
                    end_time: { [Op.ne]: null }
                }
            });

            const report = await Report.create({
                employee_id,
                report_date,
                total_work_time: Math.round(total_work_time),
                total_tasks_completed
            });

            return res.json(report);
        } catch (error) {
            return next(ApiError.badRequest("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"));
        }
    }

    // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤
    async getAllReports(req, res, next) {
        try {
            const reports = await Report.findAll({ include: [Employee] });
            return res.json(reports);
        } catch (error) {
            return next(ApiError.badRequest("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤"));
        }
    }

    // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    async getReportsByEmployee(req, res, next) {
        try {
            const { employee_id } = req.params;

            const reports = await Report.findAll({
                where: { employee_id },
                include: [Employee]
            });

            if (!reports.length) {
                return next(ApiError.badRequest("–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"));
            }

            return res.json(reports);
        } catch (error) {
            return next(ApiError.badRequest("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"));
        }
    }

    // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
    async getReportByDate(req, res, next) {
        try {
            const { employee_id, report_date } = req.params;

            const report = await Report.findOne({
                where: { employee_id, report_date },
                include: [Employee]
            });

            if (!report) {
                return next(ApiError.badRequest("–û—Ç—á–µ—Ç –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            }

            return res.json(report);
        } catch (error) {
            return next(ApiError.badRequest("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –¥–∞—Ç—É"));
        }
    }

    // üîπ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    async deleteReport(req, res, next) {
        try {
            const { id } = req.params;

            const report = await Report.findByPk(id);
            if (!report) {
                return next(ApiError.badRequest("–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            }

            await report.destroy();
            return res.json({ message: "–û—Ç—á–µ—Ç —É–¥–∞–ª–µ–Ω" });
        } catch (error) {
            return next(ApiError.badRequest("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"));
        }
    }
}

module.exports = new ReportController();
