const { Task, Employee } = require('../models/models');
const ApiError = require('../error/ApiError'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –æ—à–∏–±–∫–∏

class TaskController {
    // üîπ 1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    async createTask(req, res, next) {
        try {
            const { title, description, employee_id, status } = req.body;

            if (!title) {
                return next(ApiError.badRequest('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'));
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
            if (employee_id) {
                const employee = await Employee.findByPk(employee_id);
                if (!employee) {
                    return next(ApiError.badRequest('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'));
                }
            }

            // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            const task = await Task.create({ title, description, employee_id, status });

            return res.status(201).json(task);
        } catch (error) {
            return next(ApiError.badRequest(error.message));
        }
    }

    // üîπ 2. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é)
    async getTasks(req, res, next) {
        try {
            const { status, employee_id } = req.query;
            // let whereClause = {};
            //
            // if (status !== '') whereClause.status = status;
            // if (employee_id !== 0) whereClause.employee_id = employee_id;

            const tasks = await Task.findAll({
                // include: { model: Employee, attributes: ['id', 'first_name', 'last_name'] }
            });

            return res.json(tasks);
        } catch (error) {
            return next(ApiError.badRequest(error.message));
        }
    }

    // üîπ 3. –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É –ø–æ ID
    async getTaskById(req, res, next) {
        try {
            const { id } = req.params;

            const task = await Task.findByPk(id, {
                include: { model: Employee, attributes: ['id', 'first_name', 'last_name'] }
            });

            if (!task) {
                return next(ApiError.badRequest('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
            }

            return res.json(task);
        } catch (error) {
            return next(ApiError.badRequest(error.message));
        }
    }

    // üîπ 4. –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É (–∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç. –¥.)
    async updateTask(req, res, next) {
        try {
            const { id } = req.params;
            const { title, description, employee_id, status } = req.body;

            const task = await Task.findByPk(id);
            if (!task) {
                return next(ApiError.badRequest('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
            if (employee_id) {
                const employee = await Employee.findByPk(employee_id);
                if (!employee) {
                    return next(ApiError.badRequest('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'));
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if (title) task.title = title;
            if (description) task.description = description;
            if (status) task.status = status;
            if (employee_id) task.employee_id = employee_id;

            await task.save();
            return res.json(task);
        } catch (error) {
            return next(ApiError.badRequest(error.message));
        }
    }

    // üîπ 5. –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
    async deleteTask(req, res, next) {
        try {
            const { id } = req.params;

            const task = await Task.findByPk(id);
            if (!task) {
                return next(ApiError.badRequest('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
            }

            await task.destroy();
            return res.json({ message: '–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞' });
        } catch (error) {
            return next(ApiError.badRequest(error.message));
        }
    }
}

module.exports = new TaskController();
